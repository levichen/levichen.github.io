---
published: true
title: "SKillTree-TDD-Review"
tags: 
  - TDD
  - BDD
  - Test
---



### 為什麼要學習 TDD?

引述 [Kent Beck](https://en.wikipedia.org/wiki/Kent_Beck) 的經典反諷文: [RIP TDD](https://www.google.com.tw/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&ved=0CB4QFjAAahUKEwj_peaCn_TIAhXJI5QKHXsTBaA&url=https%3A%2F%2Fwww.facebook.com%2Fnotes%2Fkent-beck%2Frip-tdd%2F750840194948847&usg=AFQjCNGzaNseMplpLLFdcaMfnnNW70jURg&sig2=TcSsXpFK8BLKDDJPbFpwoA&cad=rja)

- **Over-engineering** : 如果每次都只以通過一個紅燈為目標，就不用擔心 over design 的問題，因為你的每一行 production code 都是為了達成測試案例而寫的。
- **API feedback**: 讓自己第一個使用 API (在測寫的時候使用)，就會知道自己的 API 有多難用，進而改善。
- **Logic errors**: 「想的跟寫的不一樣，寫的跟需求不一樣」。如果先有測試案例的話，就可以確保目標一致。(當然如何產生測試案例也很重要)
- **Documentation**: 寫文件是痛苦的。可以從好的測試案例來回想自己當初的進度，並可回想整個 scenario。
- **Feeling overwhelmed**: 找不到切入點。開始寫程式前都會想個五分鐘…我裝個水好了，回來再想個十分鐘…我去上個廁所好了。回來再想個五分鐘…我去買個飲料好了。再回來發現自己一行 code 都還沒開始寫。可以以通過最簡單的測試為目標，最算是最無腦的 argument check 也沒關係。至少你已經從 0 變成 0.1 了。
- **Separate interface from implementation thinking**: 抽象設計。
- **Agreement**: 當已經上線的系統出現問題時，你該如何確保自己的修改是不是正確的?就算是正確的，該如何確保沒有影響到其它上千個 function? 想辦法透過測試案例重現目前線上的問題，只要現在、過去的測試案例都通過了，就是把問題修復也確保不會影響其它的 function。
- **Anxiety**: 改東壞西的擔心受怕。



### 為什麼想上這堂課?

對測試一直很有興趣，只是自己也不知道從何開始，看了很多文件還有網路上的文章，也一直似懂非懂。

剛好看到幾個朋友非常推薦[ Joey Chen](https://www.facebook.com/hatelove?fref=ts) 的課程，但是一看到課程是透過 C# 當範例的時候卻有點猶豫了，因為我連一行 C# 的 code 都沒寫過…

後來真的去上了之後，才發現自己的擔心是多餘的，因為上課的例子 **非常、非常、非常** 淺顯易懂，只要會寫 code 都看到懂。這就是講師厲害的地方，可以用最簡單的例子，講出非常核心的觀念，讓你如醍醐灌頂般的吸收。



### 核心

「**老闆請你來是寫 production code 不是寫測試的。**

**但是測試可以讓我們寫出品質更好的 production code。**」

課程教的是 **開發、開發、開發** 而不是測試。

但寫測試的同時也可以看到到自己 production code 的可維護性和彈性。



### 地表最強 IDE: Visual Studio

不得不講一下，地表最強 **IDE: Visual Studio**。

由於上課的內容都是 C# ，所以課程的內容都是透過 Visual Studio  示範，

自己一直都是 VIM 的狂熱開發者，總覺用它真的超方便阿，為什麼大家不用 XD

寫 code 手都不用離開鍵盤欸!! 也沒有什麼環境的問題，連到遠端的伺服器也是 vim . 打開來就開始寫。只要裝一些 plugin 後，根本超方便阿~~



但是看到 Visual Studio 的重構功能、測試功能，真的覺得它好強大阿~~~~



### 省思

其實上這堂課，我是邊上邊流冷汗的。

怎麼說呢，應該是看到講師還有一些上課的學員，都覺得好厲害，我特別記得講師在第一天講的一句話:

**「程式寫出來會跑是正常的。但是修改一個需求你要一個月人家只要一天，這就是功力的差別」。**

雖然在學生時期待過的團隊曾經開發/維運過許多系統，但是回想起來，自己寫的程式根本沒有可測試性/可維護性/可擴充性，有種一下子被打入地獄的感覺。

也同時看到，那麼厲害的每個人，都還是非常熱血且努力的不斷增進自己。

就連那麼厲害的高手都不斷的在努力，自己根本就沒有偷懶的餘地阿!





更多課程資訊就在  [SkillTree](https://skilltree.my/events/mbh)
